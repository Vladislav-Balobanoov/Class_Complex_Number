#pragma once
#include <iostream>

using namespace std;

/*Класс - это шаблон для создания объектов, который включает в себя инициализацию данных объекта и их поведения(методы). Классы подчиняются основным концепциям ООП:
1. Инкапсуляция - Она реализуется с помощью спецификаторов доступа(По умолчанию "private") и служит для сокрытия данных от сторонних функций,
предоставляя им лишь методы для работы с экземпляром класса
2. Полиморфизм - Способность объекта выбирать правильный метод в зависимости от типа данных полученого в сообщении
3. Наследование - Возможность наследовать данные и методы от базового класса и использовать их*/
class Complex
{	//Данные находятся в private зоне, то есть они сокрыты от функций не являющихся методами класса;
	double m_re, m_im;//Член-данные, где "m_re" - Действительная часть комплексного числа; "m_im" - его мнимая часть;
public://Спецификатор доступа, говорящий, что к методам описаным ниже доступ имеют все функции в программе, не зависимо являются ли они методами этого класса или нет 
	///Блок Констукторов. 
	//Конструктор инициализирует член-данные согласно описаной реализации.
	Complex();										//Конструктор по умолчанию - вызывается, если при создании объекта не передаётся никаких данных
	Complex(double, double);						//Конструктор с параметрами - вызывается, если пользователь передал объекту два параметра типа double
	///Методы класса.
	//Методы - это функции описывающие поведения объектов класса. 
	void Input();									//Ввод - функция позволяющая ввести данные для объекта с клавиатуры
	void Output(int);								//Вывод - функция выводящая данные объекта на экран
	void set_Re(double);							//Установить Действительную часть - метод позволяющий установить значение действительной части
	void set_Im(double);							//Установить Мнимую часть - метод позволяющий установить значение мнимой части
	void set_Complex(double, double);				//Установить Мнимую и действительную часть для комплексного числа - позволяет установить значения и мнимой и действительной части	
	double get_Re();								//Взять значение действительной части - позволяет получить значение действительной части
	double get_Im();								//Взять значение мнимой части - позволяет получить значение мнимой части
	Complex operator+(const Complex&);				//Оператор сложения - перегрузка операции сложение для комплексных чисел
	Complex operator*(const Complex&);				//Оператор умножения - перегрузка операции умножения для комплексных чисел
	Complex operator/(const Complex&);				//Оператор деления - перегрузка операции деления для комплексных чисел
	Complex operator=(const Complex&);				//Оператор присваивания - Перегрузка операции присвоения для комплексных чисел
	bool operator==(Complex&);						//Оператор сравнения - перегрузка операции сравнения для комплексных чисел
};

